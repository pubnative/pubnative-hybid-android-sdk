// The MIT License (MIT)
//
// Copyright (c) 2018 PubNative GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
package net.pubnative.lite.sdk.mraid;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.Base64;

/**
 * Created by erosgarciaponte on 08.01.18.
 */

public class Assets {
    /*
     * To add a new assets, convert the asset (js or jpg or png) to a base64 string, use an online tool to remove the
     * new line characters, then add the string here.
     */

    public static final String mraidJS = "Ly8KLy8gIG1yYWlkLmpzCi8vCgooZnVuY3Rpb24oKSB7CgkKCWNvbnNvbGUubG9nKCJNUkFJRCBvYmplY3QgbG9hZGluZy4uLiIpOwoKCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCSAqIGNvbnNvbGUgbG9nZ2luZyBoZWxwZXIKCSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgl2YXIgTG9nTGV2ZWxFbnVtID0gewoJCSJERUJVRyIgICA6IDAsCgkJIklORk8iICAgIDogMSwKCQkiV0FSTklORyIgOiAyLAoJCSJFUlJPUiIgICA6IDMsCgkJIk5PTkUiICAgIDogNAoJfTsKCgl2YXIgbG9nTGV2ZWwgPSBMb2dMZXZlbEVudW0uREVCVUc7Cgl2YXIgbG9nID0ge307CgoJbG9nLmQgPSBmdW5jdGlvbihtc2cpIHsKCQlpZiAobG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLkRFQlVHKSB7CgkJCWNvbnNvbGUubG9nKCIoRC1tcmFpZC5qcykgIiArIG1zZyk7CgkJfQoJfTsKCglsb2cuaSA9IGZ1bmN0aW9uKG1zZykgewoJCWlmIChsb2dMZXZlbCA8PSBMb2dMZXZlbEVudW0uSU5GTykgewoJCQljb25zb2xlLmxvZygiKEktbXJhaWQuanMpICIgKyBtc2cpOwoJCX0KCX07CgoJbG9nLncgPSBmdW5jdGlvbihtc2cpIHsKCQlpZiAobG9nTGV2ZWwgPD0gTG9nTGV2ZWxFbnVtLldBUk5JTkcpIHsKCQkJY29uc29sZS5sb2coIihXLW1yYWlkLmpzKSAiICsgbXNnKTsKCQl9Cgl9OwoKCWxvZy5lID0gZnVuY3Rpb24obXNnKSB7CgkJaWYgKGxvZ0xldmVsIDw9IExvZ0xldmVsRW51bS5FUlJPUikgewoJCQljb25zb2xlLmxvZygiKEUtbXJhaWQuanMpICIgKyBtc2cpOwoJCX0KCX07CgoJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoJICogTVJBSUQgZGVjbGFyYXRpb24KCSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgl2YXIgbXJhaWQgPSB3aW5kb3cubXJhaWQgPSB7fTsKCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgkgKiBjb25zdGFudHMKCSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgl2YXIgVkVSU0lPTiA9ICIyLjAiOwoKCXZhciBTVEFURVMgPSBtcmFpZC5TVEFURVMgPSB7CgkJIkxPQURJTkciIDogImxvYWRpbmciLAoJCSJERUZBVUxUIiA6ICJkZWZhdWx0IiwKCQkiRVhQQU5ERUQiIDogImV4cGFuZGVkIiwKCQkiUkVTSVpFRCIgOiAicmVzaXplZCIsCgkJIkhJRERFTiIgOiAiaGlkZGVuIgoJfTsKCgl2YXIgUExBQ0VNRU5UX1RZUEVTID0gbXJhaWQuUExBQ0VNRU5UX1RZUEVTID0gewoJCSJJTkxJTkUiIDogImlubGluZSIsCgkJIklOVEVSU1RJVElBTCIgOiAiaW50ZXJzdGl0aWFsIgoJfTsKCgl2YXIgUkVTSVpFX1BST1BFUlRJRVNfQ1VTVE9NX0NMT1NFX1BPU0lUSU9OID0gbXJhaWQuUkVTSVpFX1BST1BFUlRJRVNfQ1VTVE9NX0NMT1NFX1BPU0lUSU9OID0gewoJCSJUT1BfTEVGVCIgOiAidG9wLWxlZnQiLAoJCSJUT1BfQ0VOVEVSIiA6ICJ0b3AtY2VudGVyIiwKCQkiVE9QX1JJR0hUIiA6ICJ0b3AtcmlnaHQiLAoJCSJDRU5URVIiIDogImNlbnRlciIsCgkJIkJPVFRPTV9MRUZUIiA6ICJib3R0b20tbGVmdCIsCgkJIkJPVFRPTV9DRU5URVIiIDogImJvdHRvbS1jZW50ZXIiLAoJCSJCT1RUT01fUklHSFQiIDogImJvdHRvbS1yaWdodCIKCX07CgoJdmFyIE9SSUVOVEFUSU9OX1BST1BFUlRJRVNfRk9SQ0VfT1JJRU5UQVRJT04gPSBtcmFpZC5PUklFTlRBVElPTl9QUk9QRVJUSUVTX0ZPUkNFX09SSUVOVEFUSU9OID0gewoJCSJQT1JUUkFJVCIgOiAicG9ydHJhaXQiLAoJCSJMQU5EU0NBUEUiIDogImxhbmRzY2FwZSIsCgkJIk5PTkUiIDogIm5vbmUiCgl9OwoKCXZhciBFVkVOVFMgPSBtcmFpZC5FVkVOVFMgPSB7CgkJIkVSUk9SIiA6ICJlcnJvciIsCgkJIlJFQURZIiA6ICJyZWFkeSIsCgkJIlNJWkVDSEFOR0UiIDogInNpemVDaGFuZ2UiLAoJCSJTVEFURUNIQU5HRSIgOiAic3RhdGVDaGFuZ2UiLAoJCSJWSUVXQUJMRUNIQU5HRSIgOiAidmlld2FibGVDaGFuZ2UiCgl9OwoKCXZhciBTVVBQT1JURURfRkVBVFVSRVMgPSBtcmFpZC5TVVBQT1JURURfRkVBVFVSRVMgPSB7CgkJIlNNUyIgOiAic21zIiwKCQkiVEVMIiA6ICJ0ZWwiLAoJCSJDQUxFTkRBUiIgOiAiY2FsZW5kYXIiLAoJCSJTVE9SRVBJQ1RVUkUiIDogInN0b3JlUGljdHVyZSIsCgkJIklOTElORVZJREVPIiA6ICJpbmxpbmVWaWRlbyIKCX07CgoJLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoJICogc3RhdGUKCSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgl2YXIgc3RhdGUgPSBTVEFURVMuTE9BRElORzsKCXZhciBwbGFjZW1lbnRUeXBlID0gUExBQ0VNRU5UX1RZUEVTLklOTElORTsKCXZhciBzdXBwb3J0ZWRGZWF0dXJlcyA9IHt9OwoJdmFyIGlzVmlld2FibGUgPSBmYWxzZTsKCXZhciBpc0V4cGFuZFByb3BlcnRpZXNTZXQgPSBmYWxzZTsKCXZhciBpc1Jlc2l6ZVJlYWR5ID0gZmFsc2U7CgoJdmFyIGV4cGFuZFByb3BlcnRpZXMgPSB7CgkJIndpZHRoIiA6IDAsCgkJImhlaWdodCIgOiAwLAoJCSJ1c2VDdXN0b21DbG9zZSIgOiBmYWxzZSwKCQkiaXNNb2RhbCIgOiB0cnVlCgl9OwoKCXZhciBvcmllbnRhdGlvblByb3BlcnRpZXMgPSB7CgkJImFsbG93T3JpZW50YXRpb25DaGFuZ2UiIDogdHJ1ZSwKCQkiZm9yY2VPcmllbnRhdGlvbiIgOiBPUklFTlRBVElPTl9QUk9QRVJUSUVTX0ZPUkNFX09SSUVOVEFUSU9OLk5PTkUKCX07CgoJdmFyIHJlc2l6ZVByb3BlcnRpZXMgPSB7CgkJIndpZHRoIiA6IDAsCgkJImhlaWdodCIgOiAwLAoJCSJjdXN0b21DbG9zZVBvc2l0aW9uIiA6IFJFU0laRV9QUk9QRVJUSUVTX0NVU1RPTV9DTE9TRV9QT1NJVElPTi5UT1BfUklHSFQsCgkJIm9mZnNldFgiIDogMCwKCQkib2Zmc2V0WSIgOiAwLAoJCSJhbGxvd09mZnNjcmVlbiIgOiB0cnVlCgl9OwoKCXZhciBjdXJyZW50UG9zaXRpb24gPSB7CgkJIngiIDogMCwKCQkieSIgOiAwLAoJCSJ3aWR0aCIgOiAwLAoJCSJoZWlnaHQiIDogMAoJfTsKCgl2YXIgZGVmYXVsdFBvc2l0aW9uID0gewoJCSJ4IiA6IDAsCgkJInkiIDogMCwKCQkid2lkdGgiIDogMCwKCQkiaGVpZ2h0IiA6IDAKCX07CgoJdmFyIG1heFNpemUgPSB7CgkJIndpZHRoIiA6IDAsCgkJImhlaWdodCIgOiAwCgl9OwoKCXZhciBzY3JlZW5TaXplID0gewoJCSJ3aWR0aCIgOiAwLAoJCSJoZWlnaHQiIDogMAoJfTsKCgl2YXIgY3VycmVudE9yaWVudGF0aW9uID0gMDsKCgl2YXIgbGlzdGVuZXJzID0ge307Cgl3aW5kb3cubGlzdGVuZXJzID0gbGlzdGVuZXJzOwoKCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCSAqICJvZmZpY2lhbCIgQVBJOiBtZXRob2RzIGNhbGxlZCBieSBjcmVhdGl2ZQoJICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCW1yYWlkLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIpIHsKCQlsb2cuaSgibXJhaWQuYWRkRXZlbnRMaXN0ZW5lciAiICsgZXZlbnQgKyAiOiAiICsgU3RyaW5nKGxpc3RlbmVyKSk7CgkJaWYgKCFldmVudCB8fCAhbGlzdGVuZXIpIHsKCQkJbXJhaWQuZmlyZUVycm9yRXZlbnQoIkJvdGggZXZlbnQgYW5kIGxpc3RlbmVyIGFyZSByZXF1aXJlZC4iLCAiYWRkRXZlbnRMaXN0ZW5lciIpOwoJCQlyZXR1cm47CgkJfQoJCWlmICghY29udGFpbnMoZXZlbnQsIEVWRU5UUykpIHsKCQkJbXJhaWQuZmlyZUVycm9yRXZlbnQoIlVua25vd24gTVJBSUQgZXZlbnQ6ICIgKyBldmVudCwgImFkZEV2ZW50TGlzdGVuZXIiKTsKCQkJcmV0dXJuOwoJCX0KCQl2YXIgbGlzdGVuZXJzRm9yRXZlbnQgPSBsaXN0ZW5lcnNbZXZlbnRdID0gbGlzdGVuZXJzW2V2ZW50XSB8fCBbXTsKCQkvLyBjaGVjayB0byBtYWtlIHN1cmUgdGhhdCB0aGUgbGlzdGVuZXIgaXNuJ3QgYWxyZWFkeSByZWdpc3RlcmVkCgkJZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnNGb3JFdmVudC5sZW5ndGg7IGkrKykgewoJCQl2YXIgc3RyMSA9IFN0cmluZyhsaXN0ZW5lcik7CgkJCXZhciBzdHIyID0gU3RyaW5nKGxpc3RlbmVyc0ZvckV2ZW50W2ldKTsKCQkJaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5lcnNGb3JFdmVudFtpXSB8fCBzdHIxID09PSBzdHIyKSB7CgkJCQlsb2cuaSgibGlzdGVuZXIgIiArIHN0cjEgKyAiIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBmb3IgZXZlbnQgIiArIGV2ZW50KTsKCQkJCXJldHVybjsKCQkJfQoJCX0KCQlsaXN0ZW5lcnNGb3JFdmVudC5wdXNoKGxpc3RlbmVyKTsKCX07CgoJbXJhaWQuY3JlYXRlQ2FsZW5kYXJFdmVudCA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHsKCQlsb2cuaSgibXJhaWQuY3JlYXRlQ2FsZW5kYXJFdmVudCB3aXRoICIgKyBwYXJhbWV0ZXJzKTsKCQlpZiAoc3VwcG9ydGVkRmVhdHVyZXNbbXJhaWQuU1VQUE9SVEVEX0ZFQVRVUkVTLkNBTEVOREFSXSkgewoJCQljYWxsTmF0aXZlKCJjcmVhdGVDYWxlbmRhckV2ZW50P2V2ZW50SlNPTj0iCSsgSlNPTi5zdHJpbmdpZnkocGFyYW1ldGVycykpOwoJCX0gZWxzZSB7CgkJCWxvZy5lKCJjcmVhdGVDYWxlbmRhckV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQiKTsKCQl9Cgl9OwoKCW1yYWlkLmNsb3NlID0gZnVuY3Rpb24oKSB7CgkJbG9nLmkoIm1yYWlkLmNsb3NlIik7CgkJaWYgKHN0YXRlID09PSBTVEFURVMuTE9BRElORwoJCQkJfHwgKHN0YXRlID09PSBTVEFURVMuREVGQVVMVCAmJiBwbGFjZW1lbnRUeXBlID09PSBQTEFDRU1FTlRfVFlQRVMuSU5MSU5FKQoJCQkJfHwgc3RhdGUgPT09IFNUQVRFUy5ISURERU4pIHsKCQkJLy8gZG8gbm90aGluZwoJCQlyZXR1cm47CgkJfQoJCWNhbGxOYXRpdmUoImNsb3NlIik7Cgl9OwoKCW1yYWlkLmV4cGFuZCA9IGZ1bmN0aW9uKHVybCkgewoJCWlmICh1cmwgPT09IHVuZGVmaW5lZCkgewoJCQlsb2cuaSgibXJhaWQuZXhwYW5kICgxLXBhcnQpIik7CgkJfSBlbHNlIHsKCQkJbG9nLmkoIm1yYWlkLmV4cGFuZCAiICsgdXJsKTsKCQl9CgkJLy8gVGhlIG9ubHkgdGltZSBpdCBpcyB2YWxpZCB0byBjYWxsIGV4cGFuZCBpcyB3aGVuIHRoZSBhZCBpcwoJCS8vIGEgYmFubmVyIGN1cnJlbnRseSBpbiBlaXRoZXIgZGVmYXVsdCBvciByZXNpemVkIHN0YXRlLgoJCWlmIChwbGFjZW1lbnRUeXBlICE9PSBQTEFDRU1FTlRfVFlQRVMuSU5MSU5FCgkJCQl8fCAoc3RhdGUgIT09IFNUQVRFUy5ERUZBVUxUICYmIHN0YXRlICE9PSBTVEFURVMuUkVTSVpFRCkpIHsKCQkJcmV0dXJuOwoJCX0KCQlpZiAodXJsID09PSB1bmRlZmluZWQpIHsKCQkJY2FsbE5hdGl2ZSgiZXhwYW5kIik7CgkJfSBlbHNlIHsKCQkJY2FsbE5hdGl2ZSgiZXhwYW5kP3VybD0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpOwoJCX0KCX07CgoJbXJhaWQuZ2V0Q3VycmVudFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7CgkJbG9nLmkoIm1yYWlkLmdldEN1cnJlbnRQb3NpdGlvbiIpOwoJCXJldHVybiBjdXJyZW50UG9zaXRpb247Cgl9OwoKCW1yYWlkLmdldERlZmF1bHRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkgewoJCWxvZy5pKCJtcmFpZC5nZXREZWZhdWx0UG9zaXRpb24iKTsKCQlyZXR1cm4gZGVmYXVsdFBvc2l0aW9uOwoJfTsKCgltcmFpZC5nZXRFeHBhbmRQcm9wZXJ0aWVzID0gZnVuY3Rpb24oKSB7CgkJbG9nLmkoIm1yYWlkLmdldEV4cGFuZFByb3BlcnRpZXMiKTsKCQlyZXR1cm4gZXhwYW5kUHJvcGVydGllczsKCX07CgoJbXJhaWQuZ2V0TWF4U2l6ZSA9IGZ1bmN0aW9uKCkgewoJCWxvZy5pKCJtcmFpZC5nZXRNYXhTaXplIik7CgkJcmV0dXJuIG1heFNpemU7Cgl9OwoKCW1yYWlkLmdldE9yaWVudGF0aW9uUHJvcGVydGllcyA9IGZ1bmN0aW9uKCkgewoJCWxvZy5pKCJtcmFpZC5nZXRPcmllbnRhdGlvblByb3BlcnRpZXMiKTsKCQlyZXR1cm4gb3JpZW50YXRpb25Qcm9wZXJ0aWVzOwoJfTsKCgltcmFpZC5nZXRQbGFjZW1lbnRUeXBlID0gZnVuY3Rpb24oKSB7CgkJbG9nLmkoIm1yYWlkLmdldFBsYWNlbWVudFR5cGUiKTsKCQlyZXR1cm4gcGxhY2VtZW50VHlwZTsKCX07CgoJbXJhaWQuZ2V0UmVzaXplUHJvcGVydGllcyA9IGZ1bmN0aW9uKCkgewoJCWxvZy5pKCJtcmFpZC5nZXRSZXNpemVQcm9wZXJ0aWVzIik7CgkJcmV0dXJuIHJlc2l6ZVByb3BlcnRpZXM7Cgl9OwoKCW1yYWlkLmdldFNjcmVlblNpemUgPSBmdW5jdGlvbigpIHsKCQlsb2cuaSgibXJhaWQuZ2V0U2NyZWVuU2l6ZSIpOwoJCXJldHVybiBzY3JlZW5TaXplOwoJfTsKCgltcmFpZC5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkgewoJCWxvZy5pKCJtcmFpZC5nZXRTdGF0ZSIpOwoJCXJldHVybiBzdGF0ZTsKCX07CgoJbXJhaWQuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uKCkgewoJCWxvZy5pKCJtcmFpZC5nZXRWZXJzaW9uIik7CgkJcmV0dXJuIFZFUlNJT047Cgl9OwoKCW1yYWlkLmlzVmlld2FibGUgPSBmdW5jdGlvbigpIHsKCQlsb2cuaSgibXJhaWQuaXNWaWV3YWJsZSIpOwoJCXJldHVybiBpc1ZpZXdhYmxlOwoJfTsKCgltcmFpZC5vcGVuID0gZnVuY3Rpb24odXJsKSB7CgkJbG9nLmkoIm1yYWlkLm9wZW4gIiArIHVybCk7CgkJY2FsbE5hdGl2ZSgib3Blbj91cmw9IiArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKTsKCX07CgoJbXJhaWQucGxheVZpZGVvID0gZnVuY3Rpb24odXJsKSB7CgkJbG9nLmkoIm1yYWlkLnBsYXlWaWRlbyAiICsgdXJsKTsKCQljYWxsTmF0aXZlKCJwbGF5VmlkZW8/dXJsPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXJsKSk7Cgl9OwoKCW1yYWlkLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIpIHsKCQlsb2cuaSgibXJhaWQucmVtb3ZlRXZlbnRMaXN0ZW5lciAiICsgZXZlbnQgKyAiIDogIiArIFN0cmluZyhsaXN0ZW5lcikpOwoJCWlmICghZXZlbnQpIHsKCQkJbXJhaWQuZmlyZUVycm9yRXZlbnQoIkV2ZW50IGlzIHJlcXVpcmVkLiIsICJyZW1vdmVFdmVudExpc3RlbmVyIik7CgkJCXJldHVybjsKCQl9CgkJaWYgKCFjb250YWlucyhldmVudCwgRVZFTlRTKSkgewoJCQltcmFpZC5maXJlRXJyb3JFdmVudCgiVW5rbm93biBNUkFJRCBldmVudDogIiArIGV2ZW50LCAicmVtb3ZlRXZlbnRMaXN0ZW5lciIpOwoJCQlyZXR1cm47CgkJfQoJCWlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7CgkJCWlmIChsaXN0ZW5lcikgewoJCQkJdmFyIGxpc3RlbmVyc0ZvckV2ZW50ID0gbGlzdGVuZXJzW2V2ZW50XTsKCQkJCS8vIHRyeSB0byBmaW5kIHRoZSBnaXZlbiBsaXN0ZW5lcgoJCQkJdmFyIGxlbiA9IGxpc3RlbmVyc0ZvckV2ZW50Lmxlbmd0aDsKCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKCQkJCQl2YXIgcmVnaXN0ZXJlZExpc3RlbmVyID0gbGlzdGVuZXJzRm9yRXZlbnRbaV07CgkJCQkJdmFyIHN0cjEgPSBTdHJpbmcobGlzdGVuZXIpOwoJCQkJCXZhciBzdHIyID0gU3RyaW5nKHJlZ2lzdGVyZWRMaXN0ZW5lcik7CgkJCQkJaWYgKGxpc3RlbmVyID09PSByZWdpc3RlcmVkTGlzdGVuZXIgfHwgc3RyMSA9PT0gc3RyMikgewoJCQkJCQlsaXN0ZW5lcnNGb3JFdmVudC5zcGxpY2UoaSwgMSk7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJCWlmIChpID09PSBsZW4pIHsKCQkJCQlsb2cuaSgibGlzdGVuZXIgIiArIHN0cjEgKyAiIG5vdCBmb3VuZCBmb3IgZXZlbnQgIiArIGV2ZW50KTsKCQkJCX0KCQkJCWlmIChsaXN0ZW5lcnNGb3JFdmVudC5sZW5ndGggPT09IDApIHsKCQkJCQlkZWxldGUgbGlzdGVuZXJzW2V2ZW50XTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCS8vIG5vIGxpc3RlbmVyIHRvIHJlbW92ZSB3YXMgcHJvdmlkZWQsIHNvIHJlbW92ZSBhbGwgbGlzdGVuZXJzCgkJCQkvLyBmb3IgZ2l2ZW4gZXZlbnQKCQkJCWRlbGV0ZSBsaXN0ZW5lcnNbZXZlbnRdOwoJCQl9CgkJfSBlbHNlIHsKCQkJbG9nLmkoIm5vIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBldmVudCAiICsgZXZlbnQpOwoJCX0KCX07CgoJbXJhaWQucmVzaXplID0gZnVuY3Rpb24oKSB7CgkJbG9nLmkoIm1yYWlkLnJlc2l6ZSIpOwoJCS8vIFRoZSBvbmx5IHRpbWUgaXQgaXMgdmFsaWQgdG8gY2FsbCByZXNpemUgaXMgd2hlbiB0aGUgYWQgaXMKCQkvLyBhIGJhbm5lciBjdXJyZW50bHkgaW4gZWl0aGVyIGRlZmF1bHQgb3IgcmVzaXplZCBzdGF0ZS4KCQkvLyBUcmlnZ2VyIGFuIGVycm9yIGlmIHRoZSBjdXJyZW50IHN0YXRlIGlzIGV4cGFuZGVkLgoJCWlmIChwbGFjZW1lbnRUeXBlID09PSBQTEFDRU1FTlRfVFlQRVMuSU5URVJTVElUSUFMIHx8IHN0YXRlID09PSBTVEFURVMuTE9BRElORyB8fCBzdGF0ZSA9PT0gU1RBVEVTLkhJRERFTikgewoJCQkvLyBkbyBub3RoaW5nCgkJCXJldHVybjsKCQl9CgkJaWYgKHN0YXRlID09PSBTVEFURVMuRVhQQU5ERUQpIHsKCQkJbXJhaWQuZmlyZUVycm9yRXZlbnQoIm1yYWlkLnJlc2l6ZSBjYWxsZWQgd2hlbiBhZCBpcyBpbiBleHBhbmRlZCBzdGF0ZSIsICJtcmFpZC5yZXNpemUiKTsKCQkJcmV0dXJuOwoJCX0KCQlpZiAoIWlzUmVzaXplUmVhZHkpIHsKCQkJbXJhaWQuZmlyZUVycm9yRXZlbnQoIm1yYWlkLnJlc2l6ZSBpcyBub3QgcmVhZHkgdG8gYmUgY2FsbGVkIiwgIm1yYWlkLnJlc2l6ZSIpOwoJCQlyZXR1cm47CgkJfQoJCWNhbGxOYXRpdmUoInJlc2l6ZSIpOwoJfTsKCgltcmFpZC5zZXRFeHBhbmRQcm9wZXJ0aWVzID0gZnVuY3Rpb24ocHJvcGVydGllcykgewoJCWxvZy5pKCJtcmFpZC5zZXRFeHBhbmRQcm9wZXJ0aWVzIik7CgoJCWlmICghdmFsaWRhdGUocHJvcGVydGllcywgInNldEV4cGFuZFByb3BlcnRpZXMiKSkgewoJCQlsb2cuZSgiZmFpbGVkIHZhbGlkYXRpb24iKTsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIG9sZFVzZUN1c3RvbUNsb3NlID0gZXhwYW5kUHJvcGVydGllcy51c2VDdXN0b21DbG9zZTsKCgkJLy8gZXhwYW5kUHJvcGVydGllcyBjb250YWlucyAzIHJlYWQtd3JpdGUgcHJvcGVydGllczogd2lkdGgsIGhlaWdodCwgYW5kIHVzZUN1c3RvbUNsb3NlOwoJCS8vIHRoZSBpc01vZGFsIHByb3BlcnR5IGlzIHJlYWQtb25seQoJCXZhciByd1Byb3BzID0gWyAid2lkdGgiLCAiaGVpZ2h0IiwgInVzZUN1c3RvbUNsb3NlIiBdOwoJCWZvciAodmFyIGkgPSAwOyBpIDwgcndQcm9wcy5sZW5ndGg7IGkrKykgewoJCQl2YXIgcHJvcG5hbWUgPSByd1Byb3BzW2ldOwoJCQlpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wbmFtZSkpIHsKCQkJCWV4cGFuZFByb3BlcnRpZXNbcHJvcG5hbWVdID0gcHJvcGVydGllc1twcm9wbmFtZV07CgkJCX0KCQl9CgoJCS8vIEluIE1SQUlEIHYyLjAsIGFsbCBleHBhbmRlZCBhZHMgYnkgZGVmaW5pdGlvbiBjb3ZlciB0aGUgZW50aXJlIHNjcmVlbiwKCQkvLyBzbyB0aGUgb25seSBwcm9wZXJ0eSB0aGF0IHRoZSBuYXRpdmUgc2lkZSBoYXMgdG8ga25vdyBhYm91dCBpcyB1c2VDdXN0b21DbG9zZS4KCQkvLyAoVGhhdCBpcywgdGhlIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcyBhcmUgbm90IG5lZWRlZCBieSB0aGUgbmF0aXZlIGNvZGUuKQoJCWlmIChleHBhbmRQcm9wZXJ0aWVzLnVzZUN1c3RvbUNsb3NlICE9PSBvbGRVc2VDdXN0b21DbG9zZSkgewoJCQljYWxsTmF0aXZlKCJ1c2VDdXN0b21DbG9zZT91c2VDdXN0b21DbG9zZT0iCSsgZXhwYW5kUHJvcGVydGllcy51c2VDdXN0b21DbG9zZSk7CgkJfQoJCQoJCWlzRXhwYW5kUHJvcGVydGllc1NldCA9IHRydWU7Cgl9OwoKCW1yYWlkLnNldE9yaWVudGF0aW9uUHJvcGVydGllcyA9IGZ1bmN0aW9uKHByb3BlcnRpZXMpIHsKCQlsb2cuaSgibXJhaWQuc2V0T3JpZW50YXRpb25Qcm9wZXJ0aWVzIik7CgoJCWlmICghdmFsaWRhdGUocHJvcGVydGllcywgInNldE9yaWVudGF0aW9uUHJvcGVydGllcyIpKSB7CgkJCWxvZy5lKCJmYWlsZWQgdmFsaWRhdGlvbiIpOwoJCQlyZXR1cm47CgkJfQoKCQl2YXIgbmV3T3JpZW50YXRpb25Qcm9wZXJ0aWVzID0ge307CgkJbmV3T3JpZW50YXRpb25Qcm9wZXJ0aWVzLmFsbG93T3JpZW50YXRpb25DaGFuZ2UgPSBvcmllbnRhdGlvblByb3BlcnRpZXMuYWxsb3dPcmllbnRhdGlvbkNoYW5nZSwKCQluZXdPcmllbnRhdGlvblByb3BlcnRpZXMuZm9yY2VPcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uUHJvcGVydGllcy5mb3JjZU9yaWVudGF0aW9uOwoKCQkvLyBvcmllbnRhdGlvblByb3BlcnRpZXMgY29udGFpbnMgMiByZWFkLXdyaXRlIHByb3BlcnRpZXM6CgkJLy8gYWxsb3dPcmllbnRhdGlvbkNoYW5nZSBhbmQgZm9yY2VPcmllbnRhdGlvbgoJCXZhciByd1Byb3BzID0gWyAiYWxsb3dPcmllbnRhdGlvbkNoYW5nZSIsICJmb3JjZU9yaWVudGF0aW9uIiBdOwoJCWZvciAodmFyIGkgPSAwOyBpIDwgcndQcm9wcy5sZW5ndGg7IGkrKykgewoJCQl2YXIgcHJvcG5hbWUgPSByd1Byb3BzW2ldOwoJCQlpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wbmFtZSkpIHsKCQkJCW5ld09yaWVudGF0aW9uUHJvcGVydGllc1twcm9wbmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BuYW1lXTsKCQkJfQoJCX0KCgkJLy8gU2V0dGluZyBhbGxvd09yaWVudGF0aW9uQ2hhbmdlIHRvIHRydWUgd2hpbGUgc2V0dGluZyBmb3JjZU9yaWVudGF0aW9uCgkJLy8gdG8gZWl0aGVyIHBvcnRyYWl0IG9yIGxhbmRzY2FwZQoJCS8vIGlzIGNvbnNpZGVyZWQgYW4gZXJyb3IgY29uZGl0aW9uLgoJCWlmIChuZXdPcmllbnRhdGlvblByb3BlcnRpZXMuYWxsb3dPcmllbnRhdGlvbkNoYW5nZQoJCQkJJiYgbmV3T3JpZW50YXRpb25Qcm9wZXJ0aWVzLmZvcmNlT3JpZW50YXRpb24gIT09IG1yYWlkLk9SSUVOVEFUSU9OX1BST1BFUlRJRVNfRk9SQ0VfT1JJRU5UQVRJT04uTk9ORSkgewoJCQltcmFpZC5maXJlRXJyb3JFdmVudCgKCQkJCQkiYWxsb3dPcmllbnRhdGlvbkNoYW5nZSBpcyB0cnVlIGJ1dCBmb3JjZU9yaWVudGF0aW9uIGlzICIKCQkJCQkrIG5ld09yaWVudGF0aW9uUHJvcGVydGllcy5mb3JjZU9yaWVudGF0aW9uLAoJCQkJCSJzZXRPcmllbnRhdGlvblByb3BlcnRpZXMiKTsKCQkJcmV0dXJuOwoJCX0KCgkJb3JpZW50YXRpb25Qcm9wZXJ0aWVzLmFsbG93T3JpZW50YXRpb25DaGFuZ2UgPSBuZXdPcmllbnRhdGlvblByb3BlcnRpZXMuYWxsb3dPcmllbnRhdGlvbkNoYW5nZTsKCQlvcmllbnRhdGlvblByb3BlcnRpZXMuZm9yY2VPcmllbnRhdGlvbiA9IG5ld09yaWVudGF0aW9uUHJvcGVydGllcy5mb3JjZU9yaWVudGF0aW9uOwoKCQl2YXIgcGFyYW1zID0gImFsbG93T3JpZW50YXRpb25DaGFuZ2U9IgoJCQkJKyBvcmllbnRhdGlvblByb3BlcnRpZXMuYWxsb3dPcmllbnRhdGlvbkNoYW5nZQoJCQkJKyAiJmZvcmNlT3JpZW50YXRpb249IiArIG9yaWVudGF0aW9uUHJvcGVydGllcy5mb3JjZU9yaWVudGF0aW9uOwoKCQljYWxsTmF0aXZlKCJzZXRPcmllbnRhdGlvblByb3BlcnRpZXM/IiArIHBhcmFtcyk7Cgl9OwoKCW1yYWlkLnNldFJlc2l6ZVByb3BlcnRpZXMgPSBmdW5jdGlvbihwcm9wZXJ0aWVzKSB7CgkJbG9nLmkoIm1yYWlkLnNldFJlc2l6ZVByb3BlcnRpZXMiKTsKCQkKCQlpc1Jlc2l6ZVJlYWR5ID0gZmFsc2U7CgoJCS8vIHJlc2l6ZVByb3BlcnRpZXMgY29udGFpbnMgNiByZWFkLXdyaXRlIHByb3BlcnRpZXM6CgkJLy8gd2lkdGgsIGhlaWdodCwgb2Zmc2V0WCwgb2Zmc2V0WSwgY3VzdG9tQ2xvc2VQb3NpdGlvbiwgYWxsb3dPZmZzY3JlZW4KCgkJLy8gVGhlIHByb3BlcnRpZXMgb2JqZWN0IHBhc3NlZCBpbnRvIHRoaXMgZnVuY3Rpb24gbXVzdCBjb250YWluIHdpZHRoLCBoZWlnaHQsIG9mZnNldFgsIG9mZnNldFkuCgkJLy8gVGhlIHJlbWFpbmluZyB0d28gcHJvcGVydGllcyBhcmUgb3B0aW9uYWwuCgkJdmFyIHJlcXVpcmVkUHJvcHMgPSBbICJ3aWR0aCIsICJoZWlnaHQiLCAib2Zmc2V0WCIsICJvZmZzZXRZIiBdOwoJCWZvciAodmFyIGkgPSAwOyBpIDwgcmVxdWlyZWRQcm9wcy5sZW5ndGg7IGkrKykgewoJCQl2YXIgcHJvcG5hbWUgPSByZXF1aXJlZFByb3BzW2ldOwoJCQlpZiAoIXByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcG5hbWUpKSB7CgkJCQltcmFpZC5maXJlRXJyb3JFdmVudCgKCQkJCQkJInJlcXVpcmVkIHByb3BlcnR5ICIgKyBwcm9wbmFtZSArICIgaXMgbWlzc2luZyIsCgkJCQkJCSJtcmFpZC5zZXRSZXNpemVQcm9wZXJ0aWVzIik7CgkJCQlyZXR1cm47CgkJCX0KCQl9CgkJCgkJaWYgKCF2YWxpZGF0ZShwcm9wZXJ0aWVzLCAic2V0UmVzaXplUHJvcGVydGllcyIpKSB7CgkJCW1yYWlkLmZpcmVFcnJvckV2ZW50KCJmYWlsZWQgdmFsaWRhdGlvbiIsICJtcmFpZC5zZXRSZXNpemVQcm9wZXJ0aWVzIik7CgkJCXJldHVybjsKCQl9CgkJCiAgICAgICAgdmFyIGFkanVzdG1lbnRzID0geyAieCI6IDAsICJ5IjogMCB9OwoJCQoJCXZhciBhbGxvd09mZnNjcmVlbiA9IHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoImFsbG93T2Zmc2NyZWVuIikgPyBwcm9wZXJ0aWVzLmFsbG93T2Zmc2NyZWVuIDogcmVzaXplUHJvcGVydGllcy5hbGxvd09mZnNjcmVlbjsKICAgICAgICBpZiAoIWFsbG93T2Zmc2NyZWVuKSB7CiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLndpZHRoID4gbWF4U2l6ZS53aWR0aCB8fCBwcm9wZXJ0aWVzLmhlaWdodCA+IG1heFNpemUuaGVpZ2h0KSB7CiAgICAgICAgICAgICAgICBtcmFpZC5maXJlRXJyb3JFdmVudCgicmVzaXplIHdpZHRoIG9yIGhlaWdodCBpcyBncmVhdGVyIHRoYW4gdGhlIG1heFNpemUgd2lkdGggb3IgaGVpZ2h0IiwgIm1yYWlkLnNldFJlc2l6ZVByb3BlcnRpZXMiKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBhZGp1c3RtZW50cyA9IGZpdFJlc2l6ZVZpZXdPblNjcmVlbihwcm9wZXJ0aWVzKTsKICAgICAgICB9IGVsc2UgaWYgKCFpc0Nsb3NlUmVnaW9uT25TY3JlZW4ocHJvcGVydGllcykpIHsKICAgICAgICAgICAgbXJhaWQuZmlyZUVycm9yRXZlbnQoImNsb3NlIGV2ZW50IHJlZ2lvbiB3aWxsIG5vdCBhcHBlYXIgZW50aXJlbHkgb25zY3JlZW4iLCAibXJhaWQuc2V0UmVzaXplUHJvcGVydGllcyIpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoJCQoJCXZhciByd1Byb3BzID0gWyAid2lkdGgiLCAiaGVpZ2h0IiwgIm9mZnNldFgiLCAib2Zmc2V0WSIsICJjdXN0b21DbG9zZVBvc2l0aW9uIiwgImFsbG93T2Zmc2NyZWVuIiBdOwoJCWZvciAodmFyIGkgPSAwOyBpIDwgcndQcm9wcy5sZW5ndGg7IGkrKykgewoJCQl2YXIgcHJvcG5hbWUgPSByd1Byb3BzW2ldOwoJCQlpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wbmFtZSkpIHsKCQkJCXJlc2l6ZVByb3BlcnRpZXNbcHJvcG5hbWVdID0gcHJvcGVydGllc1twcm9wbmFtZV07CgkJCX0KCQl9CgkJCgkJdmFyIHBhcmFtcyA9CgkJCSJ3aWR0aD0iICsgcmVzaXplUHJvcGVydGllcy53aWR0aCArCgkJCSImaGVpZ2h0PSIgKyByZXNpemVQcm9wZXJ0aWVzLmhlaWdodCArCgkgICAgICAgICImb2Zmc2V0WD0iICsgKHJlc2l6ZVByb3BlcnRpZXMub2Zmc2V0WCArIGFkanVzdG1lbnRzLngpICsKCSAgICAgICAgIiZvZmZzZXRZPSIgKyAocmVzaXplUHJvcGVydGllcy5vZmZzZXRZICsgYWRqdXN0bWVudHMueSkgKwoJCQkiJmN1c3RvbUNsb3NlUG9zaXRpb249IiArIHJlc2l6ZVByb3BlcnRpZXMuY3VzdG9tQ2xvc2VQb3NpdGlvbiArCgkJCSImYWxsb3dPZmZzY3JlZW49IiArIHJlc2l6ZVByb3BlcnRpZXMuYWxsb3dPZmZzY3JlZW47CgoJCWNhbGxOYXRpdmUoInNldFJlc2l6ZVByb3BlcnRpZXM/IiArIHBhcmFtcyk7CgoJCWlzUmVzaXplUmVhZHkgPSB0cnVlOwoJfTsKCgltcmFpZC5zdG9yZVBpY3R1cmUgPSBmdW5jdGlvbih1cmwpIHsKCQlsb2cuaSgibXJhaWQuc3RvcmVQaWN0dXJlICIgKyB1cmwpOwoJCWlmIChzdXBwb3J0ZWRGZWF0dXJlc1ttcmFpZC5TVVBQT1JURURfRkVBVFVSRVMuU1RPUkVQSUNUVVJFXSkgewoJCQljYWxsTmF0aXZlKCJzdG9yZVBpY3R1cmU/dXJsPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXJsKSk7CgkJfSBlbHNlIHsKCQkJbG9nLmUoInN0b3JlUGljdHVyZSBpcyBub3Qgc3VwcG9ydGVkIik7CgkJfQoJfTsKCgltcmFpZC5zdXBwb3J0cyA9IGZ1bmN0aW9uKGZlYXR1cmUpIHsKCQlsb2cuaSgibXJhaWQuc3VwcG9ydHMgIiArIGZlYXR1cmUgKyAiICIgKyBzdXBwb3J0ZWRGZWF0dXJlc1tmZWF0dXJlXSk7CgkJdmFyIHJldHZhbCA9IHN1cHBvcnRlZEZlYXR1cmVzW2ZlYXR1cmVdOwoJCWlmICh0eXBlb2YgcmV0dmFsID09PSAidW5kZWZpbmVkIikgewoJCQlyZXR2YWwgPSBmYWxzZTsKCQl9CgkJcmV0dXJuIHJldHZhbDsKCX07CgoJbXJhaWQudXNlQ3VzdG9tQ2xvc2UgPSBmdW5jdGlvbihpc0N1c3RvbUNsb3NlKSB7CgkJbG9nLmkoIm1yYWlkLnVzZUN1c3RvbUNsb3NlICIgKyBpc0N1c3RvbUNsb3NlKTsKCQlpZiAoZXhwYW5kUHJvcGVydGllcy51c2VDdXN0b21DbG9zZSAhPT0gaXNDdXN0b21DbG9zZSkgewoJCQlleHBhbmRQcm9wZXJ0aWVzLnVzZUN1c3RvbUNsb3NlID0gaXNDdXN0b21DbG9zZTsKCQkJY2FsbE5hdGl2ZSgidXNlQ3VzdG9tQ2xvc2U/dXNlQ3VzdG9tQ2xvc2U9IgoJCQkJCSsgZXhwYW5kUHJvcGVydGllcy51c2VDdXN0b21DbG9zZSk7CgkJfQoJfTsKCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgkgKiBoZWxwZXIgbWV0aG9kcyBjYWxsZWQgYnkgU0RLCgkgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoJLy8gc2V0dGVycyB0byBjaGFuZ2Ugc3RhdGUKCW1yYWlkLnNldEN1cnJlbnRQb3NpdGlvbiA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHsKCQlsb2cuaSgibXJhaWQuc2V0Q3VycmVudFBvc2l0aW9uICIgKyB4ICsgIiwiICsgeSArICIsIiArIHdpZHRoICsgIiwiCSsgaGVpZ2h0KTsKCgkJdmFyIHByZXZpb3VzU2l6ZSA9IHt9OwoJCXByZXZpb3VzU2l6ZS53aWR0aCA9IGN1cnJlbnRQb3NpdGlvbi53aWR0aDsKCQlwcmV2aW91c1NpemUuaGVpZ2h0ID0gY3VycmVudFBvc2l0aW9uLmhlaWdodDsKCQlsb2cuaSgicHJldmlvdXNTaXplICIgKyBwcmV2aW91c1NpemUud2lkdGggKyAiLCIgKyBwcmV2aW91c1NpemUuaGVpZ2h0KTsKCgkJY3VycmVudFBvc2l0aW9uLnggPSB4OwoJCWN1cnJlbnRQb3NpdGlvbi55ID0geTsKCQljdXJyZW50UG9zaXRpb24ud2lkdGggPSB3aWR0aDsKCQljdXJyZW50UG9zaXRpb24uaGVpZ2h0ID0gaGVpZ2h0OwoKCQlpZiAod2lkdGggIT09IHByZXZpb3VzU2l6ZS53aWR0aCB8fCBoZWlnaHQgIT09IHByZXZpb3VzU2l6ZS5oZWlnaHQpIHsKCQkJbXJhaWQuZmlyZVNpemVDaGFuZ2VFdmVudCh3aWR0aCwgaGVpZ2h0KTsKCQl9Cgl9OwoKCW1yYWlkLnNldERlZmF1bHRQb3NpdGlvbiA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHsKCQlsb2cuaSgibXJhaWQuc2V0RGVmYXVsdFBvc2l0aW9uICIgKyB4ICsgIiwiICsgeSArICIsIiArIHdpZHRoICsgIiwiCSsgaGVpZ2h0KTsKCQlkZWZhdWx0UG9zaXRpb24ueCA9IHg7CgkJZGVmYXVsdFBvc2l0aW9uLnkgPSB5OwoJCWRlZmF1bHRQb3NpdGlvbi53aWR0aCA9IHdpZHRoOwoJCWRlZmF1bHRQb3NpdGlvbi5oZWlnaHQgPSBoZWlnaHQ7Cgl9OwoKCW1yYWlkLnNldEV4cGFuZFNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CgkJbG9nLmkoIm1yYWlkLnNldEV4cGFuZFNpemUgIiArIHdpZHRoICsgIngiICsgaGVpZ2h0KTsKCQlleHBhbmRQcm9wZXJ0aWVzLndpZHRoID0gd2lkdGg7CgkJZXhwYW5kUHJvcGVydGllcy5oZWlnaHQgPSBoZWlnaHQ7Cgl9OwoKCW1yYWlkLnNldE1heFNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CgkJbG9nLmkoIm1yYWlkLnNldE1heFNpemUgIiArIHdpZHRoICsgIngiICsgaGVpZ2h0KTsKCQltYXhTaXplLndpZHRoID0gd2lkdGg7CgkJbWF4U2l6ZS5oZWlnaHQgPSBoZWlnaHQ7Cgl9OwoKCW1yYWlkLnNldFBsYWNlbWVudFR5cGUgPSBmdW5jdGlvbihwdCkgewoJCWxvZy5pKCJtcmFpZC5zZXRQbGFjZW1lbnRUeXBlICIgKyBwdCk7CgkJcGxhY2VtZW50VHlwZSA9IHB0OwoJfTsKCgltcmFpZC5zZXRTY3JlZW5TaXplID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkgewoJCWxvZy5pKCJtcmFpZC5zZXRTY3JlZW5TaXplICIgKyB3aWR0aCArICJ4IiArIGhlaWdodCk7CgkJc2NyZWVuU2l6ZS53aWR0aCA9IHdpZHRoOwoJCXNjcmVlblNpemUuaGVpZ2h0ID0gaGVpZ2h0OwoJCWlmICghaXNFeHBhbmRQcm9wZXJ0aWVzU2V0KSB7CgkJCWV4cGFuZFByb3BlcnRpZXMud2lkdGggPSB3aWR0aDsKCQkJZXhwYW5kUHJvcGVydGllcy5oZWlnaHQgPSBoZWlnaHQ7OwoJCX0KCX07CgoJbXJhaWQuc2V0U3VwcG9ydHMgPSBmdW5jdGlvbihmZWF0dXJlLCBzdXBwb3J0ZWQpIHsKCQlsb2cuaSgibXJhaWQuc2V0U3VwcG9ydHMgIiArIGZlYXR1cmUgKyAiICIgKyBzdXBwb3J0ZWQpOwoJCXN1cHBvcnRlZEZlYXR1cmVzW2ZlYXR1cmVdID0gc3VwcG9ydGVkOwoJfTsKCgkvLyBtZXRob2RzIHRvIGZpcmUgZXZlbnRzCgoJbXJhaWQuZmlyZUVycm9yRXZlbnQgPSBmdW5jdGlvbihtZXNzYWdlLCBhY3Rpb24pIHsKCQlsb2cuaSgibXJhaWQuZmlyZUVycm9yRXZlbnQgIiArIG1lc3NhZ2UgKyAiICIgKyBhY3Rpb24pOwoJCWZpcmVFdmVudChtcmFpZC5FVkVOVFMuRVJST1IsIG1lc3NhZ2UsIGFjdGlvbik7Cgl9OwoKCW1yYWlkLmZpcmVSZWFkeUV2ZW50ID0gZnVuY3Rpb24oKSB7CgkJbG9nLmkoIm1yYWlkLmZpcmVSZWFkeUV2ZW50Iik7CgkJZmlyZUV2ZW50KG1yYWlkLkVWRU5UUy5SRUFEWSk7Cgl9OwoKCW1yYWlkLmZpcmVTaXplQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CgkJbG9nLmkoIm1yYWlkLmZpcmVTaXplQ2hhbmdlRXZlbnQgIiArIHdpZHRoICsgIngiICsgaGVpZ2h0KTsKCQlpZiAoc3RhdGUgIT09IG1yYWlkLlNUQVRFUy5MT0FESU5HKSB7CgkJCWZpcmVFdmVudChtcmFpZC5FVkVOVFMuU0laRUNIQU5HRSwgd2lkdGgsIGhlaWdodCk7CgkJfQoJfTsKCgltcmFpZC5maXJlU3RhdGVDaGFuZ2VFdmVudCA9IGZ1bmN0aW9uKG5ld1N0YXRlKSB7CgkJbG9nLmkoIm1yYWlkLmZpcmVTdGF0ZUNoYW5nZUV2ZW50ICIgKyBuZXdTdGF0ZSk7CgkJaWYgKHN0YXRlICE9PSBuZXdTdGF0ZSkgewoJCQlzdGF0ZSA9IG5ld1N0YXRlOwoJCQlmaXJlRXZlbnQobXJhaWQuRVZFTlRTLlNUQVRFQ0hBTkdFLCBzdGF0ZSk7CgkJfQoJfTsKCgltcmFpZC5maXJlVmlld2FibGVDaGFuZ2VFdmVudCA9IGZ1bmN0aW9uKG5ld0lzVmlld2FibGUpIHsKCQlsb2cuaSgibXJhaWQuZmlyZVZpZXdhYmxlQ2hhbmdlRXZlbnQgIiArIG5ld0lzVmlld2FibGUpOwoJCWlmIChpc1ZpZXdhYmxlICE9PSBuZXdJc1ZpZXdhYmxlKSB7CgkJCWlzVmlld2FibGUgPSBuZXdJc1ZpZXdhYmxlOwoJCQlmaXJlRXZlbnQobXJhaWQuRVZFTlRTLlZJRVdBQkxFQ0hBTkdFLCBpc1ZpZXdhYmxlKTsKCQl9Cgl9OwoKCS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCSAqIGludGVybmFsIGhlbHBlciBtZXRob2RzCgkgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoJZnVuY3Rpb24gY2FsbE5hdGl2ZShjb21tYW5kKSB7CgkJdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIklGUkFNRSIpOwoJCWlmcmFtZS5zZXRBdHRyaWJ1dGUoInNyYyIsICJtcmFpZDovLyIgKyBjb21tYW5kKTsKCQlkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoaWZyYW1lKTsKCQlpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpOwoJCWlmcmFtZSA9IG51bGw7Cgl9OwoKCWZ1bmN0aW9uIGZpcmVFdmVudChldmVudCkgewoJCXZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKCQlhcmdzLnNoaWZ0KCk7CgkJbG9nLmkoImZpcmVFdmVudCAiICsgZXZlbnQgKyAiIFsiICsgYXJncy50b1N0cmluZygpICsgIl0iKTsKCQl2YXIgZXZlbnRMaXN0ZW5lcnMgPSAobGlzdGVuZXJzW2V2ZW50XXx8W10pLnNsaWNlKDApOwoJCWlmIChldmVudExpc3RlbmVycykgewoJCQlsb2cuaShldmVudExpc3RlbmVycy5sZW5ndGggKyAiIGxpc3RlbmVyKHMpIGZvdW5kIGZvciAiICsgZXZlbnQpOwoJCQlmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7CgkJCSAgICBsb2cuaSgiZmlyaW5nIGxpc3RlbmVyICIgKyBpICsgIiBmb3IgIiArIGV2ZW50ICsgIjogIiArIGV2ZW50TGlzdGVuZXJzW2ldKTsKCQkJCWV2ZW50TGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGFyZ3MpOwoJCQl9CgkJfSBlbHNlIHsKCQkJbG9nLmkoIm5vIGxpc3RlbmVycyBmb3VuZCIpOwoJCX0KCX07CgoJZnVuY3Rpb24gY29udGFpbnModmFsdWUsIGFycmF5KSB7CgkJZm9yICggdmFyIGkgaW4gYXJyYXkpIHsKCQkJaWYgKGFycmF5W2ldID09PSB2YWx1ZSkgewoJCQkJcmV0dXJuIHRydWU7CgkJCX0KCQl9CgkJcmV0dXJuIGZhbHNlOwoJfTsKCgkvLyBUaGUgYWN0aW9uIHBhcmFtZXRlciBpcyBhIHN0cmluZyB3aGljaCBpcyB0aGUgbmFtZSBvZiB0aGUgc2V0dGVyIGZ1bmN0aW9uCgkvLyB3aGljaCBjYWxsZWQgdGhpcyBmdW5jdGlvbgoJLy8gKGluIG90aGVyIHdvcmRzLCBzZXRFeHBhbmRQcm9wZXRpZXMsIHNldE9yaWVudGF0aW9uUHJvcGVydGllcywgb3IKCS8vIHNldFJlc2l6ZVByb3BlcnRpZXMpLgoJLy8gSXQgc2VydmVzIGJvdGggYXMgdGhlIGtleSB0byBnZXQgdGhlIHRoZSBhcHByb3ByaWF0ZSBzZXQgb2YgdmFsaWRhdGluZwoJLy8gZnVuY3Rpb25zIGZyb20gdGhlIGFsbFZhbGlkYXRvcnMgb2JqZWN0CgkvLyBhcyB3ZWxsIGFzIHRoZSBhY3Rpb24gcGFyYW1ldGVyIG9mIGFueSBlcnJvciBldmVudCB0aGF0IG1heSBiZSB0aHJvd24uCglmdW5jdGlvbiB2YWxpZGF0ZShwcm9wZXJ0aWVzLCBhY3Rpb24pIHsKCQl2YXIgcmV0dmFsID0gdHJ1ZTsKCQl2YXIgdmFsaWRhdG9ycyA9IGFsbFZhbGlkYXRvcnNbYWN0aW9uXTsKCQlmb3IgKHZhciBwcm9wIGluIHByb3BlcnRpZXMpIHsKCQkJdmFyIHZhbGlkYXRvciA9IHZhbGlkYXRvcnNbcHJvcF07CgkJCXZhciB2YWx1ZSA9IHByb3BlcnRpZXNbcHJvcF07CgkJCWlmICh2YWxpZGF0b3IgJiYgIXZhbGlkYXRvcih2YWx1ZSkpIHsKCQkJCW1yYWlkLmZpcmVFcnJvckV2ZW50KCJWYWx1ZSBvZiBwcm9wZXJ0eSAiICsgcHJvcCArICIgKCIgKyB2YWx1ZQkrICIpIGlzIGludmFsaWQiLCAibXJhaWQuIiArIGFjdGlvbik7CgkJCQlyZXR2YWwgPSBmYWxzZTsKCQkJfQoJCX0KCQlyZXR1cm4gcmV0dmFsOwoJfTsKCgl2YXIgYWxsVmFsaWRhdG9ycyA9IHsKCQkic2V0RXhwYW5kUHJvcGVydGllcyIgOiB7CgkJCS8vIEluIE1SQUlEIDIuMCwgdGhlIG9ubHkgcHJvcGVydHkgaW4gZXhwYW5kUHJvcGVydGllcyB3ZSBhY3R1YWxseSBjYXJlIGFib3V0IGlzIHVzZUN1c3RvbUNsb3NlLgoJCQkvLyBTdGlsbCwgd2UnbGwgZG8gYSBiYXNpYyBzYW5pdHkgY2hlY2sgb24gdGhlIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcywgdG9vLgoJCQkid2lkdGgiIDogZnVuY3Rpb24od2lkdGgpIHsKCQkJCXJldHVybiAhaXNOYU4od2lkdGgpOwoJCQl9LAoJCQkiaGVpZ2h0IiA6IGZ1bmN0aW9uKGhlaWdodCkgewoJCQkJcmV0dXJuICFpc05hTihoZWlnaHQpOwoJCQl9LAoJCQkidXNlQ3VzdG9tQ2xvc2UiIDogZnVuY3Rpb24odXNlQ3VzdG9tQ2xvc2UpIHsKCQkJCXJldHVybiAodHlwZW9mIHVzZUN1c3RvbUNsb3NlID09PSAiYm9vbGVhbiIpOwoJCQl9CgkJfSwKCQkic2V0T3JpZW50YXRpb25Qcm9wZXJ0aWVzIiA6IHsKCQkJImFsbG93T3JpZW50YXRpb25DaGFuZ2UiIDogZnVuY3Rpb24oYWxsb3dPcmllbnRhdGlvbkNoYW5nZSkgewoJCQkJcmV0dXJuICh0eXBlb2YgYWxsb3dPcmllbnRhdGlvbkNoYW5nZSA9PT0gImJvb2xlYW4iKTsKCQkJfSwKCQkJImZvcmNlT3JpZW50YXRpb24iIDogZnVuY3Rpb24oZm9yY2VPcmllbnRhdGlvbikgewoJCQkJdmFyIHZhbGlkVmFsdWVzID0gWyAicG9ydHJhaXQiLCAibGFuZHNjYXBlIiwgIm5vbmUiIF07CgkJCQlyZXR1cm4gKHR5cGVvZiBmb3JjZU9yaWVudGF0aW9uID09PSAic3RyaW5nIiAmJiB2YWxpZFZhbHVlcy5pbmRleE9mKGZvcmNlT3JpZW50YXRpb24pICE9PSAtMSk7CgkJCX0KCQl9LAoJCSJzZXRSZXNpemVQcm9wZXJ0aWVzIiA6IHsKCQkJIndpZHRoIiA6IGZ1bmN0aW9uKHdpZHRoKSB7CgkJCQlyZXR1cm4gIWlzTmFOKHdpZHRoKSAmJiA1MCA8PSB3aWR0aDsKCQkJfSwKCQkJImhlaWdodCIgOiBmdW5jdGlvbihoZWlnaHQpIHsKCQkJCXJldHVybiAhaXNOYU4oaGVpZ2h0KSAmJiA1MCA8PSBoZWlnaHQ7CgkJCX0sCgkJCSJvZmZzZXRYIiA6IGZ1bmN0aW9uKG9mZnNldFgpIHsKCQkJCXJldHVybiAhaXNOYU4ob2Zmc2V0WCk7CgkJCX0sCgkJCSJvZmZzZXRZIiA6IGZ1bmN0aW9uKG9mZnNldFkpIHsKCQkJCXJldHVybiAhaXNOYU4ob2Zmc2V0WSk7CgkJCX0sCgkJCSJjdXN0b21DbG9zZVBvc2l0aW9uIiA6IGZ1bmN0aW9uKGN1c3RvbUNsb3NlUG9zaXRpb24pIHsKCQkJCXZhciB2YWxpZFBvc2l0aW9ucyA9IFsgInRvcC1sZWZ0IiwgInRvcC1jZW50ZXIiLCAidG9wLXJpZ2h0IiwKCQkJCSAgICAgICAgICAgICAgICAgICAgICAgImNlbnRlciIsCgkJCQkgICAgICAgICAgICAgICAgICAgICAgICJib3R0b20tbGVmdCIsICJib3R0b20tY2VudGVyIiwJImJvdHRvbS1yaWdodCIgXTsKCQkJCXJldHVybiAodHlwZW9mIGN1c3RvbUNsb3NlUG9zaXRpb24gPT09ICJzdHJpbmciICYmIHZhbGlkUG9zaXRpb25zLmluZGV4T2YoY3VzdG9tQ2xvc2VQb3NpdGlvbikgIT09IC0xKTsKCQkJfSwKCQkJImFsbG93T2Zmc2NyZWVuIiA6IGZ1bmN0aW9uKGFsbG93T2Zmc2NyZWVuKSB7CgkJCQlyZXR1cm4gKHR5cGVvZiBhbGxvd09mZnNjcmVlbiA9PT0gImJvb2xlYW4iKTsKCQkJfQoJCX0KCX07CgkKICAgIGZ1bmN0aW9uIGlzQ2xvc2VSZWdpb25PblNjcmVlbihwcm9wZXJ0aWVzKSB7CiAgICAgICAgbG9nLmQoImlzQ2xvc2VSZWdpb25PblNjcmVlbiIpOwogICAgICAgIGxvZy5kKCJkZWZhdWx0UG9zaXRpb24gIiArIGRlZmF1bHRQb3NpdGlvbi54ICsgIiAiICsgZGVmYXVsdFBvc2l0aW9uLnkpOwogICAgICAgIGxvZy5kKCJvZmZzZXQgIiArIHByb3BlcnRpZXMub2Zmc2V0WCArICIgIiArIHByb3BlcnRpZXMub2Zmc2V0WSk7CgogICAgICAgIHZhciByZXNpemVSZWN0ID0ge307CiAgICAgICAgcmVzaXplUmVjdC54ID0gZGVmYXVsdFBvc2l0aW9uLnggKyBwcm9wZXJ0aWVzLm9mZnNldFg7CiAgICAgICAgcmVzaXplUmVjdC55ID0gZGVmYXVsdFBvc2l0aW9uLnkgKyBwcm9wZXJ0aWVzLm9mZnNldFk7CiAgICAgICAgcmVzaXplUmVjdC53aWR0aCA9IHByb3BlcnRpZXMud2lkdGg7CiAgICAgICAgcmVzaXplUmVjdC5oZWlnaHQgPSBwcm9wZXJ0aWVzLmhlaWdodDsKICAgICAgICBwcmludFJlY3QoInJlc2l6ZVJlY3QiLCByZXNpemVSZWN0KTsKCgkJdmFyIGN1c3RvbUNsb3NlUG9zaXRpb24gPSBwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCJjdXN0b21DbG9zZVBvc2l0aW9uIikgPwoJCQkJcHJvcGVydGllcy5jdXN0b21DbG9zZVBvc2l0aW9uIDogcmVzaXplUHJvcGVydGllcy5jdXN0b21DbG9zZVBvc2l0aW9uOwogICAgICAgIGxvZy5kKCJjdXN0b21DbG9zZVBvc2l0aW9uICIgKyBjdXN0b21DbG9zZVBvc2l0aW9uKTsKICAgICAgICAKICAgICAgICB2YXIgY2xvc2VSZWN0ID0geyAid2lkdGgiOiA1MCwgImhlaWdodCI6IDUwIH07CgogICAgICAgIGlmIChjdXN0b21DbG9zZVBvc2l0aW9uLnNlYXJjaCgibGVmdCIpICE9PSAtMSkgewogICAgICAgICAgICBjbG9zZVJlY3QueCA9IHJlc2l6ZVJlY3QueDsKICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUNsb3NlUG9zaXRpb24uc2VhcmNoKCJjZW50ZXIiKSAhPT0gLTEpIHsKICAgICAgICAgICAgY2xvc2VSZWN0LnggPSByZXNpemVSZWN0LnggKyAocmVzaXplUmVjdC53aWR0aCAvIDIpIC0gMjU7CiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21DbG9zZVBvc2l0aW9uLnNlYXJjaCgicmlnaHQiKSAhPT0gLTEpIHsKICAgICAgICAgICAgY2xvc2VSZWN0LnggPSByZXNpemVSZWN0LnggKyByZXNpemVSZWN0LndpZHRoIC0gNTA7CiAgICAgICAgfQoKICAgICAgICBpZiAoY3VzdG9tQ2xvc2VQb3NpdGlvbi5zZWFyY2goInRvcCIpICE9PSAtMSkgewogICAgICAgICAgICBjbG9zZVJlY3QueSA9IHJlc2l6ZVJlY3QueTsKICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUNsb3NlUG9zaXRpb24gPT09ICJjZW50ZXIiKSB7CiAgICAgICAgICAgIGNsb3NlUmVjdC55ID0gcmVzaXplUmVjdC55ICsgKHJlc2l6ZVJlY3QuaGVpZ2h0IC8gMikgLSAyNTsKICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUNsb3NlUG9zaXRpb24uc2VhcmNoKCJib3R0b20iKSAhPT0gLTEpIHsKICAgICAgICAgICAgY2xvc2VSZWN0LnkgPSByZXNpemVSZWN0LnkgKyByZXNpemVSZWN0LmhlaWdodCAtIDUwOwogICAgICAgIH0KCiAgICAgICAgdmFyIG1heFJlY3QgPSB7ICJ4IjogMCwgInkiOiAwIH07CiAgICAgICAgbWF4UmVjdC53aWR0aCA9IG1heFNpemUud2lkdGg7CiAgICAgICAgbWF4UmVjdC5oZWlnaHQgPSBtYXhTaXplLmhlaWdodDsKCiAgICAgICAgcmV0dXJuIGlzUmVjdENvbnRhaW5lZChtYXhSZWN0LCBjbG9zZVJlY3QpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBmaXRSZXNpemVWaWV3T25TY3JlZW4ocHJvcGVydGllcykgewogICAgICAgIGxvZy5kKCJmaXRSZXNpemVWaWV3T25TY3JlZW4iKTsKICAgICAgICBsb2cuZCgiZGVmYXVsdFBvc2l0aW9uICIgKyBkZWZhdWx0UG9zaXRpb24ueCArICIgIiArIGRlZmF1bHRQb3NpdGlvbi55KTsKICAgICAgICBsb2cuZCgib2Zmc2V0ICIgKyBwcm9wZXJ0aWVzLm9mZnNldFggKyAiICIgKyBwcm9wZXJ0aWVzLm9mZnNldFkpOwoKICAgICAgICB2YXIgcmVzaXplUmVjdCA9IHt9OwogICAgICAgIHJlc2l6ZVJlY3QueCA9IGRlZmF1bHRQb3NpdGlvbi54ICsgcHJvcGVydGllcy5vZmZzZXRYOwogICAgICAgIHJlc2l6ZVJlY3QueSA9IGRlZmF1bHRQb3NpdGlvbi55ICsgcHJvcGVydGllcy5vZmZzZXRZOwogICAgICAgIHJlc2l6ZVJlY3Qud2lkdGggPSBwcm9wZXJ0aWVzLndpZHRoOwogICAgICAgIHJlc2l6ZVJlY3QuaGVpZ2h0ID0gcHJvcGVydGllcy5oZWlnaHQ7CiAgICAgICAgcHJpbnRSZWN0KCJyZXNpemVSZWN0IiwgcmVzaXplUmVjdCk7CgogICAgICAgIHZhciBtYXhSZWN0ID0geyAieCI6IDAsICJ5IjogMCB9OwogICAgICAgIG1heFJlY3Qud2lkdGggPSBtYXhTaXplLndpZHRoOwogICAgICAgIG1heFJlY3QuaGVpZ2h0ID0gbWF4U2l6ZS5oZWlnaHQ7CgogICAgICAgIHZhciBhZGp1c3RtZW50cyA9IHsgIngiOiAwLCAieSI6IDAgfTsKCiAgICAgICAgaWYgKGlzUmVjdENvbnRhaW5lZChtYXhSZWN0LCByZXNpemVSZWN0KSkgewogICAgICAgICAgICBsb2cuZCgibm8gYWRqdXN0bWVudCBuZWNlc3NhcnkiKTsKICAgICAgICAgICAgcmV0dXJuIGFkanVzdG1lbnRzOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc2l6ZVJlY3QueCA8IG1heFJlY3QueCkgewogICAgICAgICAgICBhZGp1c3RtZW50cy54ID0gbWF4UmVjdC54IC0gcmVzaXplUmVjdC54OwogICAgICAgIH0gZWxzZSBpZiAoKHJlc2l6ZVJlY3QueCArIHJlc2l6ZVJlY3Qud2lkdGgpID4gKG1heFJlY3QueCArIG1heFJlY3Qud2lkdGgpKSB7CiAgICAgICAgICAgIGFkanVzdG1lbnRzLnggPSAobWF4UmVjdC54ICsgbWF4UmVjdC53aWR0aCkgLSAocmVzaXplUmVjdC54ICsgcmVzaXplUmVjdC53aWR0aCk7CiAgICAgICAgfQogICAgICAgIGxvZy5kKCJhZGp1c3RtZW50cy54ICIgKyBhZGp1c3RtZW50cy54KTsKCiAgICAgICAgaWYgKHJlc2l6ZVJlY3QueSA8IG1heFJlY3QueSkgewogICAgICAgICAgICBhZGp1c3RtZW50cy55ID0gbWF4UmVjdC55IC0gcmVzaXplUmVjdC55OwogICAgICAgIH0gZWxzZSBpZiAoKHJlc2l6ZVJlY3QueSArIHJlc2l6ZVJlY3QuaGVpZ2h0KSA+IChtYXhSZWN0LnkgKyBtYXhSZWN0LmhlaWdodCkpIHsKICAgICAgICAgICAgYWRqdXN0bWVudHMueSA9IChtYXhSZWN0LnkgKyBtYXhSZWN0LmhlaWdodCkgLSAocmVzaXplUmVjdC55ICsgcmVzaXplUmVjdC5oZWlnaHQpOwogICAgICAgIH0KICAgICAgICBsb2cuZCgiYWRqdXN0bWVudHMueSAiICsgYWRqdXN0bWVudHMueSk7CgogICAgICAgIHJlc2l6ZVJlY3QueCA9IGRlZmF1bHRQb3NpdGlvbi54ICsgcHJvcGVydGllcy5vZmZzZXRYICsgYWRqdXN0bWVudHMueDsKICAgICAgICByZXNpemVSZWN0LnkgPSBkZWZhdWx0UG9zaXRpb24ueSArIHByb3BlcnRpZXMub2Zmc2V0WSArIGFkanVzdG1lbnRzLnk7CiAgICAgICAgcHJpbnRSZWN0KCJhZGp1c3RlZCByZXNpemVSZWN0IiwgcmVzaXplUmVjdCk7CgogICAgICAgIHJldHVybiBhZGp1c3RtZW50czsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gaXNSZWN0Q29udGFpbmVkKGNvbnRhaW5pbmdSZWN0LCBjb250YWluZWRSZWN0KSB7CiAgICAgICAgbG9nLmQoImlzUmVjdENvbnRhaW5lZCIpOwogICAgICAgIHByaW50UmVjdCgiY29udGFpbmluZ1JlY3QiLCBjb250YWluaW5nUmVjdCk7CiAgICAgICAgcHJpbnRSZWN0KCJjb250YWluZWRSZWN0IiwgY29udGFpbmVkUmVjdCk7CiAgICAgICAgcmV0dXJuIChjb250YWluZWRSZWN0LnggPj0gY29udGFpbmluZ1JlY3QueCAmJgogICAgICAgICAgICAoY29udGFpbmVkUmVjdC54ICsgY29udGFpbmVkUmVjdC53aWR0aCkgPD0gKGNvbnRhaW5pbmdSZWN0LnggKyBjb250YWluaW5nUmVjdC53aWR0aCkgJiYKICAgICAgICAgICAgY29udGFpbmVkUmVjdC55ID49IGNvbnRhaW5pbmdSZWN0LnkgJiYKICAgICAgICAgICAgKGNvbnRhaW5lZFJlY3QueSArIGNvbnRhaW5lZFJlY3QuaGVpZ2h0KSA8PSAoY29udGFpbmluZ1JlY3QueSArIGNvbnRhaW5pbmdSZWN0LmhlaWdodCkpOwogICAgfQogICAgCiAgICBmdW5jdGlvbiBwcmludFJlY3QobGFiZWwsIHJlY3QpIHsKICAgICAgICBsb2cuZChsYWJlbCArCiAgICAgICAgICAgICIgWyIgKyByZWN0LnggKyAiLCIgKyByZWN0LnkgKyAiXSIgKwogICAgICAgICAgICAiLFsiICsgKHJlY3QueCArIHJlY3Qud2lkdGgpICsgIiwiICsgKHJlY3QueSArIHJlY3QuaGVpZ2h0KSArICJdIiArCiAgICAgICAgICAgICIgKCIgKyByZWN0LndpZHRoICsgIngiICsgcmVjdC5oZWlnaHQgKyAiKSIpOwogICAgfQoJCgltcmFpZC5kdW1wTGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7CgkJdmFyIG5FdmVudHMgPSBPYmplY3Qua2V5cyhsaXN0ZW5lcnMpLmxlbmd0aDsKCQlsb2cuaSgiZHVtcGluZyBsaXN0ZW5lcnMgKCIgKyBuRXZlbnRzICsgIiBldmVudHMpIik7CgkJZm9yICggdmFyIGV2ZW50IGluIGxpc3RlbmVycykgewoJCQl2YXIgZXZlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnNbZXZlbnRdOwoJCQlsb2cuaSgiICAiICsgZXZlbnQgKyAiIGNvbnRhaW5zICIgKyBldmVudExpc3RlbmVycy5sZW5ndGggKyAiIGxpc3RlbmVycyIpOwoJCQlmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7CgkJCQlsb2cuaSgiICAgICIgKyBldmVudExpc3RlbmVyc1tpXSk7CgkJCX0KCQl9Cgl9OwoJCgljb25zb2xlLmxvZygiTVJBSUQgb2JqZWN0IGxvYWRlZCIpOwoKfSkoKTs=";

    public static final String new_close = "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABmJLR0QA/wD/AP+gvaeTAAAACXBI WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3goHFBQe/AkWfQAADBBJREFUeNrtXUFIW1kUPT9VqyKM 0qqYQS2tuIwwCwOl0NW46SI44PJvymxaaIesxqXdSGVWA0JdTMCFSDaxCK4cswiB0NWM3XSVStQ2 4wiDCplYnJg7C38kDZr/3v/v/f/eNxcuZKHJ/++cd9999917n4EAChG1A+gFEAZwD8B9AA+sz98C GATwDYBO61++ADgB8DeAzwAKAD4C2LE+FwEcG4bxX9DGyggA2LcsoL8D8D2AHwAMSfq5vwCsAfgd wB8AioZhnKMlnoN+h4hiRJQi/yVlPcudFjJyQe8noqdEtEPqyo71jP0txMSA3kFEU0T0jvSTd9az d7R8AAcmHsCPAF4HhMuzAH4zDOOf1rRuDnyYiBYpuLJIROEW0lev70EG/ioiKOEnGD4D3wngJxmm /vT0FIeHh9jd3UU+n7/Uvb09FItFHB0doVwuAwC6u7vR19eHcDiMkZERjI2NXero6CgGBgbQ1dUl a2n41TCMLzdx1k+Jmk6VSoUKhQIlk0kyTZPa2toIgFBta2sj0zQpmUxSoVCgSqUi0iJM3TRzv+F2 xEqlEqXTaTJNUzjYrGqaJqXTaSqVSiJIsBH47aMVMHEsZ2dnlMlkKBaL+Qb6dRqLxSiTydDZ2Zlb IsSCCHw3ES07HZGDgwOan59XDvTrdH5+ng4ODtyQYJmIuoMC/jgRnTsZhXw+76uJF7FE5PN5pyQ4 J6Jx3cF/4uTNC4UCzczMaAt8o87MzFChUHBKhCe6gh/nfdPj42OKx+OBAb5R4/E4HR8fOyFBXCfg Q7xBnWq1SslkMrDAN2oymaRqteokeBRSHfx23iPa/f19ikajNwb8mkajUdrf33dy9Nyu8sndJs/b 3KRZ38wacMqmcieM1sxnBr9cLmvt3cvYLZTLZV4StKu05qd4PPyenp4W8A3a09PDu1NIKeET8Dh8 uVyuBbaN5nI5LsdQm63e2tpaC2BGXVtbU3+LyBPkSSQSLWA5NZFIqBssssK7TLK0tNQC1KEuLS3x kGDcK/C7WWP7rZnvqSU49+QAifVUr7Xm++ITLCtxni/C23/9+jWFQiHtwYtEIhSPx2l8fNyr3UFM Fvj9rPt8Ny86Pj5Oq6url1YkEoloDX5t9q6urromAUecoF8GATZYInxugzzr6+tffWc2m9XSEhiG Qdls9qt3WV9fdx0sYowYbogGnymB0214txF8XUlQP/Mbxa0lME3T20RTIur04mDnOvB1I8FVM79R 3FoCjgOkThEE+JnlSFcm+LqQoNnMF20JGI+Sf5bu+FWrVVfn+azgq04CHvBFkCAajbImlfS7IcCi LNNf7+3zimokYDH7MkjAuBQsOgU/zJLD5zX49YEmFbaITma+SBIw5hiGpcx+JwmcIsBXhQRuZr4o EsTjcfFWwGrBIiXgs7m5SSLFr+VAxMwXRQLGANEdoZ6/k7z9jo4OevHihZNkSKVIIAP8eqt6+/Zt 7roDYTsCK7nTtmLH6eB1dXVpTQKRZv+qJW1iYsLRczFWIHWwEMA26uc24ieLBLJ9Apkz3w34HBHC KRYCvLMr1BQxmLpZAlVnfr0yFKS+cx34EV2l++zZMykDKtISqDzz0VCV7CowRBc97prW54ueWaov B7qAX1OG/gRPmxGgaRPGTCYjZW1VdTnQwew3aiaTsfvpHcd7f5mdOVSzBLrNfNR1KnEUE7BL9yqV StK3WDUSiBZeS6DjzK9Xhp5FsasI0LS8K51OexZo8dMx1HXm12s6nbZ7lFQj+Ldk7/11IEEQwOeI CdyqJ8Bws7+sVCqex9q99gmCAn5NGfoYDjOv/24zfVXfHchc87PZLBmG4fnYMRwQxZiPfv1u5CBj Ochms5ffr7PD5yJZZLGeAEWV1n+vSLC1tUVbW1uBA5/RDyjWd/doKjJ676pCgiCCD6u3MYO028b/ y+WyMrl3snyCoIFfU4Yikn4Q0YSKDqCOJPDL4XPhCE7Y7gBkxf+DthyoNPM5zgViIVxcqnit5PN5 qChv3rzB8+fPlXiWt2/f4tWrV3j//r1SY8SA3f0QLm7U1I4AqpBAVfAZsXsQwsV1qloSAACWl5fx 8uVLfPr0qQU+P3b3QER/NlskdGjj6odjqJrDd135mI38aRsEGh4e1qYs2yvHUEWH7yodHh62DwYR 0b/N/kKnrp41S+Dyto5AgF9rKGEj/4JsOn7p1p1jcnKStre3pYCfTqe1AR8AhUIhu1c6V7v/PKdE IhHMzs5iYmJCyvcTEYgIgZKgLAEyz/O9qDvwcwnQ3gmUeZ7vRd2B306g1ttAr8HXiQQs28AQgM/N loiRkRGl1/xUKoVHjx55/tvT09OYm5tDJBJRdnwYsPscAlBo9hdjY2PKgj83N4fp6WnfnkF1EjBg V2gD8FE3AqgAfj0J+vv78fjxY1SrVd0I8FG742C/1nwdfQKW42CtEkJUBV9VErAmhGiREqY6+CqS gDUlTPmkUJlBnu3tbeFnByqQgDkp1IoGKpsWLrtiZ3JyUst2NXbKnBZuEUDJwhCvqnR17VkEgYUh ypWGeV2rFzQS8JaGKVUc6metnqwyNK8PkHiLQ5UpD/e7Slf3PoaM6z9RfXm4RQLfG0SoUqKtOwm4 G0Sw+AGyW8SoWKKt63LgtEWMb02iVG3OoKNj6LhJlEUCz9vEyQRfVOq2TpbAcZs4iwCeNorUpS2L Tj6B20aRnrWK1a0njw4kcN0q1iKB9GbROph9HZcD182iLQJIbRevezcuVR1Dke3ipV0YITu272Wt nmqWQNiFERYJhF8ZE7Q+fCr5BEKvjGGNCfAcEA0NDdHKykpgwJdNgu3tbS5rJvzSKJYjYiL2a+N6 e3tpYWGBTk5OAgO+LBKcnJzQwsIC9fb2+ndtnEUAoRdHDg4OCiWBSlW6okhQA39wcND/iyNZrQBP sogoEqhYou2WBE7Al3p1LGtgiPfyaLckULk+3w0JfvnlF/Uuj2bdEfBeH++UBDo0Z3BCAl7w4dX1 8RYBOll+iTdvkJcEOnXmYCWBE7PPYfqJiDpF9RCYYvk13gghKwl0Ap+VBE7BZ4z4sUX9OEmwYfeL 5XKZu6GEHQl0BN+OBE7B7+npYSn2ICLaEF5oyOIQ8gaI7EigM/jXkcAp+BwBH/eOXxMSMKWb5HI5 1yQIAviNJPjw4YNj8HO5HCv4Maklx0S0zOq0OSXByspKYMCvaWdnJz18+JDu3r3L/b8cZyjL0mvO iaibbFrL1SSRSHC/bG9vLw0NDQUKfDeaSCRYwT8nom5PGg8Q0TjrUy0tLbWAdKhLS0s8YZJxT7tP ENET1idzYglaMz/BA/4TX1qQEFGcJ4rXAlb4mk9EFPe1Dw3LgZGb3cFNUw5v391Bj0AChMimrKwx TqBTA2qvtKenh2efT9aYq9Hqly66jGyyPnm5XFbiLkJV1DRN1ghfTTap1t1DFbGSSTd53sLvG0lV UI6DnXrwO6CiWJYgxfM2+/v7WtxKIlqj0aiTvIGUcjP/Gp9gkeetqtXqjbIGyWSSNZnjK4dPmTVf 9BaxPseQNdFUR43H46w5fGpt9bwIFjXuFHjrDlTWmZkZXg/f/yCP4LDxuZM3z+fzWu8WTNNkrdi5 LrY/jiCIdYC07HQkDg4OhFUle6Hz8/Num08ue3aw4zERYm5G5ezsjDKZjLROJW40FotRJpNhqc/3 9zxfARL0s6SX2UmpVKJ0Ou3rEmGaJqXTaZaePExpXNIyeRQlwhQJkkqlQoVCgZLJJJmmKaW3cVtb G5mmSclkkgqFAksfPh6Z8gsHw2cSdAL4CcBr0d99enqKw8ND7O7uIp/PX+re3h6KxSKOjo5QLpcB AN3d3ejr60M4HMbIyAjGxsYudXR0FAMDA+jq6pIxBLMAfjUM4wtusljLwiLdHFm8UeaegwjhgBNh 0XGhZhCXgCZEuAPgRxlLg08yC+A3wzD+aU1z/hPGKbJpXKWovLOevaOFpDg/4SnZNLP0WXasZ2yt 77KXCCuolFIA9JT1LHd0HEsjAGS4BSAM4DsA3wP4AcCQpJ/7C8AagN8B/AGgaBjGuc7jZwTUQrQD 6LWIcQ/AfQAPrM/fAhgE8A2AWvn0FwAnAP7GxVW6BVxcqLljfS4CODYM47+gjdX/V+LYxXLzNfgA AAAASUVORK5CYII=";
    public static final String new_close_pressed = "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 4RT5f02O5nnLDJUQAAAAAElFTkSuQmCC";

    public static final String resize_script = "d2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY29uc3QgaW1nTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKTsKICAgICAgICAgICAgbGV0IGJpZ0ltZ0xpc3QgPSBbXTsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWdMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoaW1nTGlzdFtpXS5jbGllbnRXaWR0aCA+IDMwKSB7CiAgICAgICAgICAgICAgICAgICAgYmlnSW1nTGlzdC5wdXNoKGltZ0xpc3RbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChiaWdJbWdMaXN0Lmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgbGV0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIGJpZ0ltZ0xpc3RbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3JhcHBlciwgYmlnSW1nTGlzdFswXSk7CiAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGJpZ0ltZ0xpc3RbMF0pOwogICAgICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nOwogICAgICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5tYXhXaWR0aCA9ICcxMDB2dyc7CiAgICAgICAgICAgICAgICBiaWdJbWdMaXN0WzBdLnN0eWxlLndpZHRoID0gJ2F1dG8nOwogICAgICAgICAgICAgICAgYmlnSW1nTGlzdFswXS5zdHlsZS5oZWlnaHQgPSAnMTAwdmgnOwogICAgICAgICAgICAgICAgYmlnSW1nTGlzdFswXS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7CiAgICAgICAgICAgICAgICBiaWdJbWdMaXN0WzBdLnN0eWxlLmxlZnQgPSAnNTAlJzsKICAgICAgICAgICAgICAgIGJpZ0ltZ0xpc3RbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLTUwJSknOwogICAgICAgICAgICB9CiAgICAgICAgfQ==";

    public static final String verification_script = "";

    public static Drawable getDrawableFromBase64(Resources resources, String encodedString) {
        byte[] decodedString = Base64.decode(encodedString, Base64.DEFAULT);
        Bitmap bitmap = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
        return new BitmapDrawable(resources, bitmap);
    }
}
