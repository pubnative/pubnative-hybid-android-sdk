plugins {
    id 'com.android.library'
    id 'com.jfrog.artifactory'
    id 'maven-publish'
}

//==================================================================================================
// PROJECT
//==================================================================================================
def project_name = project.name
def version_name = project.version
if (branchName != null && buildNumber != null && branchName.toString() != "master" && !branchName.toString().contains("/")) {
    version_name = "${version_name}-${branchName}"
    project_name = "${project_name}.beta"
}
version = version_name

//==================================================================================================
// ANDROID
//==================================================================================================

android {
    compileSdk android_api
    defaultConfig {
        minSdkVersion min_android_api
        targetSdkVersion android_api
        versionCode System.getenv("GITHUB_RUN_NUMBER") ? System.getenv("GITHUB_RUN_NUMBER").toInteger() : 1
        versionName version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled System.getenv("CI") ? true : false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'lite.sdk.pro'
            buildConfigField "String", "OMIDPV", "\"$omid_version\""
            buildConfigField "String", "OMIDPN", "\"Pubnativenet\""
            buildConfigField "String", "SDK_VERSION", "\"$version_name\""
            buildConfigField "String", "SDK_WRAPPER_VERSION", "\"$version_name\""
            buildConfigField "String", "DISPLAY_MANAGER_NAME", "\"HyBid\""
            buildConfigField "Boolean", "IS_WRAPPED", "false"
            buildConfigField "String", "BASE_URL", "\"https://api.pubnative.net/\""
            buildConfigField "String", "BASE_RTB_URL", "\"https://dsp.pubnative.net/\""
        }
        debug {
            testCoverageEnabled = true
            buildConfigField "String", "OMIDPV", "\"$omid_version\""
            buildConfigField "String", "OMIDPN", "\"Pubnativenet\""
            buildConfigField "String", "SDK_VERSION", "\"$version_name\""
            buildConfigField "String", "SDK_WRAPPER_VERSION", "\"$version_name\""
            buildConfigField "String", "DISPLAY_MANAGER_NAME", "\"HyBid\""
            buildConfigField "Boolean", "IS_WRAPPED", "false"
            buildConfigField "String", "BASE_URL", "\"https://api.pubnative.net/\""
            buildConfigField "String", "BASE_RTB_URL", "\"https://dsp.pubnative.net/\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    buildFeatures {
        buildConfig true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    namespace 'net.pubnative.lite.sdk'
}

tasks.register('repackageNG') {
    doLast {
        def smaatoDir = file("src/nextgen/java/com/verve/ng/sdk")
        smaatoDir.mkdirs()
        def sourceDir = file("src/main/java/net/pubnative/lite/sdk")
        if (sourceDir.exists()) {
            fileTree(dir: sourceDir).include("**/*.java").each { File file ->
                def relativePath = file.path.substring(sourceDir.path.length())
                def targetFile = new File(smaatoDir, relativePath)
                targetFile.parentFile.mkdirs()
                def content = file.text
                content = content.replaceAll("package net.pubnative.lite.sdk", "package com.verve.ng.sdk")
                content = content.replaceAll("import net.pubnative.lite.sdk", "import com.verve.ng.sdk")
                content = content.replaceAll("import static net.pubnative.lite.sdk", "import static com.verve.ng.sdk")
                content = content.replaceAll("net.pubnative.lite.sdk.BuildConfig", "com.verve.ng.sdk.BuildConfig")
                targetFile.text = content
            }
        } else {
            println "Source directory not found: ${sourceDir.path}"
        }
    }
}

dependencies {

    implementation "net.pubnative:hybid.omsdk:$omid_version"
    implementation "com.verve:atom.sdk:+"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.14.1'
    testImplementation 'org.mockito:mockito-core:5.16.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'org.mockito:mockito-inline:4.5.1'


    testImplementation 'com.squareup.assertj:assertj-android:1.2.0'
    androidTestImplementation "androidx.test:runner:1.1.0-beta01", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test:rules:1.1.0-beta01", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-core:3.1.0-beta01", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}
//--------------------------------------------------------------------------------------------------
// sonar
//--------------------------------------------------------------------------------------------------
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.11"
}

tasks.register("jacocoTestReport", JacocoReport) {
    group = "verification"
    description = "Generates JaCoCo coverage report for hybid.sdk"

    dependsOn "testDebugUnitTest"

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*']
    def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    sourceDirectories.setFrom(files([
            "$projectDir/src/main/java",
            "$projectDir/src/main/kotlin"
    ]))

    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))

    executionData.setFrom(fileTree(dir: buildDir, includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    ]))
}

tasks.withType(Test).configureEach {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

//--------------------------------------------------------------------------------------------------
// COVERALLS
//--------------------------------------------------------------------------------------------------
//cobertura.coverageFormats = ['html', 'xml']

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    def bootClasspathFiles = android.getBootClasspath().findAll { it != null && it.toString().trim() }
    classpath += project.rootProject.files(bootClasspathFiles)
    options.memberLevel = JavadocMemberLevel.PUBLIC
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

static def addDependency(dependency, dependenciesNode) { //finish with dependencies
    if (dependency.group != null && dependency.name != null) {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', dependency.group)
        dependencyNode.appendNode('artifactId', dependency.name)
        dependencyNode.appendNode('version', dependency.version)

        if (dependency.excludeRules.size() > 0) {
            def exclusions = dependencyNode.appendNode('exclusions')
            dependency.excludeRules.each { ExcludeRule ex ->
                def exclusion = exclusions.appendNode('exclusion')
                exclusion.appendNode('groupId', ex.group)
                if (ex.module == null || ex.module.isEmpty()) {
                    exclusion.appendNode('artifactId', "*")
                } else {
                    exclusion.appendNode('artifactId', ex.module)
                }
            }
        }
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name
            artifact javadocJar
            if (branchName.toString() == "master") {
                artifact sourcesJar
            }
            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.withType(ModuleDependency).each {
                    addDependency(it, dependenciesNode)
                }
            }
        }
    }
}

artifactory {
    contextUrl = System.getenv("ARTIFACTORY_CONTEXT_URL")
    publish {
        repository {
            repoKey = System.getenv("ARTIFACTORY_REPOKEY")
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
        }

        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
        }
    }
}