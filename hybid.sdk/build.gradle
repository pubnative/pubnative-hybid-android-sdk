//==================================================================================================
// PROJECT
//==================================================================================================
def project_name = project.name
def version_name = project.version
if (branchName != "master") {
    version_name = "${version_name}-${branchName}.${buildNumber}"
    project_name = "${project_name}.beta"
}
version = version_name

//==================================================================================================
// ANDROID
//==================================================================================================
apply plugin: 'com.android.library'

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode System.getenv("CIRCLE_BUILD_NUM") ? System.getenv("CIRCLE_BUILD_NUM").toInteger() : 1
        versionName version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled System.getenv("CI") ? true : false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'lite.sdk.pro'
            buildConfigField "String", "OMIDPV", "\"$omid_version\""
            buildConfigField "String", "OMIDPN", "\"pubnativenet\""
        }
        debug {
            buildConfigField "String", "OMIDPV", "\"$omid_version\""
            buildConfigField "String", "OMIDPN", "\"pubnativenet\""
        }
    }
}

dependencies {
    // Remember to update OMSDK version constant found in HyBid.java
    implementation "net.pubnative:hybid.omsdk:$omid_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.mockito:mockito-core:2.24.0'
    testImplementation 'com.google.truth:truth:0.36'
    testImplementation 'com.squareup.assertj:assertj-android:1.1.1'
    androidTestImplementation "androidx.test:runner:1.1.0-beta01", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test:rules:1.1.0-beta01", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-core:3.1.0-beta01", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

//--------------------------------------------------------------------------------------------------
// COVERALLS
//--------------------------------------------------------------------------------------------------
apply plugin: "net.saliman.cobertura"
apply plugin: "com.github.kt3k.coveralls"
cobertura.coverageFormats = ['html', 'xml']

//--------------------------------------------------------------------------------------------------
// MAVEN
//--------------------------------------------------------------------------------------------------
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.rootProject.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = JavadocMemberLevel.PUBLIC
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def addDependency(dependency, dependenciesNode) { //finish with dependencies
    if(dependency.group!=null && dependency.name != null) {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', dependency.group)
        dependencyNode.appendNode('artifactId', dependency.name)
        dependencyNode.appendNode('version', dependency.version)

        if (dependency.excludeRules.size() > 0) {
            def exclusions = dependencyNode.appendNode('exclusions')
            dependency.excludeRules.each { ExcludeRule ex ->
                def exclusion = exclusions.appendNode('exclusion')
                exclusion.appendNode('groupId', ex.group)
                if (ex.module == null || ex.module.isEmpty()) {
                    exclusion.appendNode('artifactId', "*")
                } else {
                    exclusion.appendNode('artifactId', ex.module)
                }
            }
        }
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name
            artifact javadocJar
            if (branchName == "master") {
                artifact sourcesJar
            }
            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.withType(ModuleDependency).each {
                    addDependency(it, dependenciesNode)
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// BINTRAY
//--------------------------------------------------------------------------------------------------
apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_API_KEY")
    publish = branchName != "master"
    override = true
    publications = ['aar']
    pkg {
        configurations = ['archives']
        userOrg = 'pubnative'
        repo = 'maven'
        desc = 'HyBid SDK'
        websiteUrl = "https://pubnative.net"
        name = project_name
        licenses = ['MIT']
        labels = ['android', 'advertising', 'sdk', 'pubnative', 'hybid', 'ads', 'development']
        version {
            name = version_name
            vcsTag = version_name
            released = new Date()
            vcsUrl = System.getenv("CIRCLE_REPOSITORY_URL")
        }
    }
}