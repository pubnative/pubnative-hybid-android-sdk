//==================================================================================================
// PROJECT
//==================================================================================================
def project_name = project.name
def version_name = project.version
if (System.getenv("IS_BETA")) {
    version_name = "${version_name}-${branchName}.${buildNumber}"
    project_name = "${project_name}.beta"
}
version = version_name

//==================================================================================================
// ANDROID
//==================================================================================================
apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode System.getenv("CIRCLE_BUILD_NUM") ? System.getenv("CIRCLE_BUILD_NUM").toInteger() : 1
        versionName version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled System.getenv("CI") ? true : false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'lite.sdk.pro'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.5.1'
    testImplementation 'org.mockito:mockito-core:2.11.0'
    testImplementation 'com.google.truth:truth:0.36'
    testImplementation 'com.squareup.assertj:assertj-android:1.1.1'
    androidTestImplementation "com.android.support.test:runner:0.5", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test:rules:0.5", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:2.2.2", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

//--------------------------------------------------------------------------------------------------
// COVERALLS
//--------------------------------------------------------------------------------------------------
apply plugin: "net.saliman.cobertura"
apply plugin: "com.github.kt3k.coveralls"
cobertura.coverageFormats = ['html', 'xml']

//--------------------------------------------------------------------------------------------------
// MAVEN
//--------------------------------------------------------------------------------------------------
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.rootProject.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = JavadocMemberLevel.PUBLIC
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name
            artifact javadocJar
            if (!System.getenv("IS_BETA")) {
                artifact sourcesJar
            }
            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// BINTRAY
//--------------------------------------------------------------------------------------------------
apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_API_KEY")
    publish = System.getenv("IS_BETA") ? true : false
    override = true
    publications = ['aar']
    pkg {
        configurations = ['archives']
        userOrg = 'pubnative'
        repo = 'maven'
        desc = 'PubNative Lite SDK'
        websiteUrl = "https://pubnative.net"
        name = project_name
        licenses = ['MIT']
        labels = ['android', 'advertising', 'sdk', 'pubnative', 'ads', 'development']
        version {
            name = version_name
            vcsTag = version_name
            released = new Date()
            vcsUrl = System.getenv("CIRCLE_REPOSITORY_URL")
        }
    }
}