apply plugin: 'com.android.library'

def project_name = project.name
def version_name = project.version
if (System.getenv("IS_BETA")) {
    version_name = "${version_name}-${branchName}.${buildNumber}"
    project_name = "${project_name}.beta"
}
version = version_name

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode System.getenv("CIRCLE_BUILD_NUM") ? System.getenv("CIRCLE_BUILD_NUM").toInteger() : 1
        versionName version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled System.getenv("CI") ? true : false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.5.1'
    testImplementation 'org.mockito:mockito-core:2.11.0'
    testImplementation "com.google.truth:truth:0.36"
}

apply plugin: 'maven-publish'

publishing {
    publications {
        Production(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name

            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
        Sandbox(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name

            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

bintray {
    // Get Bintray credential from environment variable
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    override = true
    publications = ['aar']
    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = project_name
        userOrg = 'pubnative'
        licenses = ['MIT']
        desc = 'PubNative Lite SDK'
        websiteUrl = "https://pubnative.net"
        publish = System.getenv("IS_BETA") ? true : false
        version {
            name = version_name
            vcsTag = version_name
            released = new Date()
            vcsUrl = System.getenv("CIRCLE_REPOSITORY_URL")
        }
    }
    publications = ['Production', 'Sandbox']

}