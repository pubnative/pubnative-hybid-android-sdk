apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'


def project_name = project.name
def version_name = project.version
if (branchName != null && buildNumber != null && branchName.toString() != "master") {
    version_name = "${version_name}-${branchName}.${buildNumber}"
    project_name = "${project_name}.beta"
}
version = version_name

android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation project(':hybid.sdk.logger')

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation 'androidx.appcompat:appcompat:1.4.1'
    
    //Kotlin Reflect
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'com.google.truth:truth:0.36'
}



apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.rootProject.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = JavadocMemberLevel.PUBLIC
    failOnError false
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def addDependency(dependency, dependenciesNode) { //finish with dependencies
    if(dependency.group!=null && dependency.name != null) {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', dependency.group)
        dependencyNode.appendNode('artifactId', dependency.name)
        dependencyNode.appendNode('version', dependency.version)

        if (dependency.excludeRules.size() > 0) {
            def exclusions = dependencyNode.appendNode('exclusions')
            dependency.excludeRules.each { ExcludeRule ex ->
                def exclusion = exclusions.appendNode('exclusion')
                exclusion.appendNode('groupId', ex.group)
                if (ex.module == null || ex.module.isEmpty()) {
                    exclusion.appendNode('artifactId', "*")
                } else {
                    exclusion.appendNode('artifactId', ex.module)
                }
            }
        }
    }
}


publishing {
    publications {
        aar(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name
            artifact javadocJar
            if (branchName.toString() == "master") {
                artifact sourcesJar
            }
            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.withType(ModuleDependency).each {
                    addDependency(it, dependenciesNode)
                }
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

artifactory {
    contextUrl = System.getenv("ARTIFACTORY_CONTEXT_URL")
    publish {
        repository {
            repoKey = (branchName.toString() == 'master') ? 'verve-gradle-release-local' : 'verve-gradle-dev-local'
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true
        }

        defaults {
            publishArtifacts = branchName.toString() != "master"
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = (branchName.toString() == 'master') ? 'verve-gradle-release' : 'verve-gradle-dev'
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true
        }
    }
}