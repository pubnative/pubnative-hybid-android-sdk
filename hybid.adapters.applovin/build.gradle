plugins {
    id 'com.android.library'
    id 'com.jfrog.artifactory'
    id 'maven-publish'
    id 'kotlin-android'
    id 'jacoco'
}

def project_name = project.name
def version_name = project.version
if (branchName != null && buildNumber != null && branchName.toString() != "master" && !branchName.toString().contains("/")) {
    version_name = "${version_name}-${branchName}"
    project_name = "${project_name}.beta"
}
//==================================================================================================
// ANDROID
//==================================================================================================
version = version_name

android {
    compileSdk android_api

    defaultConfig {
        minSdkVersion min_android_api
        targetSdkVersion android_api
        versionCode System.getenv("GITHUB_RUN_NUMBER") ? System.getenv("GITHUB_RUN_NUMBER").toInteger() : 1
        versionName version_name
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    namespace 'com.applovin.mediation.adapters'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':hybid.sdk')
    compileOnly 'com.applovin:applovin-sdk:13.2.0'

    implementation project(':hybid.sdk')
}



task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

publishing {
    publications {

        aar(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name
            if (branchName.toString() == "master") {
                artifact sourcesJar
            }
            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }
        }
    }
}

artifactory {
    contextUrl = System.getenv("ARTIFACTORY_CONTEXT_URL")
    publish {
        repository {
            repoKey = System.getenv("ARTIFACTORY_REPOKEY")
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
        }

        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
        }
    }
}